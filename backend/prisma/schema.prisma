// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") //env("DATABASE_URL"). What is there now is to test locally
}

enum UserStatus {
  AVAILABLE
  BUSY
  DND
}

// User Table
model User {
  id             Int        @id @default(autoincrement())
  username       String    @unique
  email          String?     @unique
  password       String // hashed with bcrypt, not plain text
  name           String?
  profilePicture String?
  status         UserStatus @default(AVAILABLE)
  visibility     Boolean    @default(true)
  trustScore     Decimal    @default(0.0)
  interestTags   String[]   @default([])
  createdAt      DateTime   @default(now())

  // Relations
  messagesSent     Message[]         @relation("SentMessages")
  wavesSent        Wave[]            @relation("WavesSent")
  wavesRecv        Wave[]            @relation("WavesReceived")
  reportsMade      Report[]          @relation("ReportsMade")
  reportsAgainst   Report[]          @relation("ReportsAgainst")
  tags             Tag[]             @relation("UserTags") //User interests
  chatParticipants ChatParticipant[]
}

model ChatSession {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  messages     Message[]
  participants ChatParticipant[]
}

model ChatParticipant {
  id            Int      @id @default(autoincrement())
  chatSessionId Int
  userId        Int
  joinedAt      DateTime @default(now())

  chatSession ChatSession @relation(fields: [chatSessionId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@unique([chatSessionId, userId]) // prevent duplicate participants
}

model Message {
  id            Int      @id @default(autoincrement())
  content       String
  createdAt     DateTime @default(now())
  senderId      Int
  chatSessionId Int

  sender      User        @relation("SentMessages", fields: [senderId], references: [id])
  chatSession ChatSession @relation(fields: [chatSessionId], references: [id])

  @@index([chatSessionId])
}

model Wave {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  senderId   Int
  receiverId Int
  sender     User     @relation("WavesSent", fields: [senderId], references: [id])
  receiver   User     @relation("WavesReceived", fields: [receiverId], references: [id])
}

model Report {
  id         Int      @id @default(autoincrement())
  reason     String
  createdAt  DateTime @default(now())
  reporterId Int
  reportedId Int
  reporter   User     @relation("ReportsMade", fields: [reporterId], references: [id])
  reported   User     @relation("ReportsAgainst", fields: [reportedId], references: [id])
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[] @relation("UserTags") //allows for relation between users and tags via a join tab
}
