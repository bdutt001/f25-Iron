// ---------- GENERATOR & DATASOURCE ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- ENUMS ----------
enum UserStatus {
  AVAILABLE
  BUSY
  DND
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// ---------- MODELS ----------

model User {
  id             Int        @id @default(autoincrement())
  email          String     @unique
  password       String
  tokenVersion   Int        @default(0)
  name           String?
  profilePicture String?
  status         UserStatus @default(AVAILABLE)
  visibility     Boolean    @default(true)
  trustScore     Int        @default(99)
  createdAt      DateTime   @default(now())
  lastLogin      DateTime?
  dateOfBirth    DateTime?
  gender         Gender?
  emailVerified  Boolean    @default(false)
  isAdmin        Boolean    @default(false)

  // Relations
  messagesSent     Message[]         @relation("SentMessages")
  wavesSent        Wave[]            @relation("WavesSent")
  wavesRecv        Wave[]            @relation("WavesReceived")
  reportsMade      Report[]          @relation("ReportsMade")
  reportsAgainst   Report[]          @relation("ReportsAgainst")
  interestTags     Tag[]             @relation("UserInterestTags")
  chatParticipants ChatParticipant[]
  locations        UserLocation[]
  blocksMade       Block[]           @relation("BlocksMade")
  blocksReceived   Block[]           @relation("BlocksReceived")

  @@index([email])
}

// User location tracking
model UserLocation {
  id        Int      @id @default(autoincrement())
  userId    Int
  latitude  Float
  longitude Float
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

// Chat sessions
model ChatSession {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages     Message[]
  participants ChatParticipant[]
}

// Chat participants
model ChatParticipant {
  id            Int      @id @default(autoincrement())
  chatSessionId Int
  userId        Int
  joinedAt      DateTime @default(now())

  chatSession ChatSession @relation(fields: [chatSessionId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@unique([chatSessionId, userId])
}

// Messages
model Message {
  id            Int      @id @default(autoincrement())
  content       String
  createdAt     DateTime @default(now())
  senderId      Int
  chatSessionId Int

  sender      User        @relation("SentMessages", fields: [senderId], references: [id])
  chatSession ChatSession @relation(fields: [chatSessionId], references: [id])

  @@index([chatSessionId])
}

// Waves (user-to-user)
model Wave {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  senderId   Int
  receiverId Int

  sender   User @relation("WavesSent", fields: [senderId], references: [id])
  receiver User @relation("WavesReceived", fields: [receiverId], references: [id])
}

// Reports (misconduct)
model Report {
  id          Int      @id @default(autoincrement())
  reason      String
  description String?
  createdAt   DateTime @default(now())
  reporterId  Int
  reportedId  Int
  severity    Int?     @default(1)

  reporter User @relation("ReportsMade", fields: [reporterId], references: [id])
  reported User @relation("ReportsAgainst", fields: [reportedId], references: [id])
}

// Blocks (prevent user interaction)
model Block {
  id        Int      @id @default(autoincrement())
  blockerId Int
  blockedId Int
  createdAt DateTime @default(now())

  blocker User @relation("BlocksMade", fields: [blockerId], references: [id])
  blocked User @relation("BlocksReceived", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

// Tags (user interests)
model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[] @relation("UserInterestTags")
}
